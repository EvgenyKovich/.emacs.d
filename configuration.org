#+TITLE: Emacs Configuration
#+AUTHOR: stask

An attempt to have minimal Emacs configuration that will be easier to maintain.
Only the stuff i use and understand will be here (no more blind copy/paste from other people's configs).
Inspired by [[https://github.com/danielmai/.emacs.d][Daniel Mai's config]].
Uses [[https://github.com/jwiegley/use-package][use-package]] extensively.

* Installing Emacs

  Assuming [[https://brew.sh/][Homebrew]] is installed, use it to install [[https://github.com/railwaycat/homebrew-emacsmacport][emacs-mac]] formula.
  See [[https://github.com/railwaycat/homebrew-emacsmacport#homebrew][Homebrew installation instructions]].

* Better defaults

** Customize settings

   Setup the customize file to its own separate file instead of saving customize settings in [[file:init.el][init.el]].

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (load custom-file)
   #+END_SRC

** Mac specific

   Configure modifier keys.

   #+BEGIN_SRC emacs-lisp
     (when (string-equal system-type "darwin")
       (setq mac-option-modifier 'meta
             mac-command-modifier 'hyper))
   #+END_SRC

   Delete files by moving them to the trash.

   #+BEGIN_SRC emacs-lisp
     (when (string-equal system-type "darwin")
       (setq delete-by-moving-to-trash t
             trash-directory "~/.Trash"))
   #+END_SRC

** Assorted

   #+BEGIN_SRC emacs-lisp
     ;; answering just 'y' or 'n' will do
     (defalias 'yes-or-no-p 'y-or-n-p)

     ;; keep all backup and auto-save files in one directory
     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
     (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

     ;; UTF-8 please
     (setq locale-coding-system 'utf-8) ; pretty
     (set-terminal-coding-system 'utf-8) ; pretty
     (set-keyboard-coding-system 'utf-8) ; pretty
     (set-selection-coding-system 'utf-8) ; please
     (prefer-coding-system 'utf-8) ; with sugar on top

     ;; prettify symbols
     (global-prettify-symbols-mode t)

     ;; turn off the blinking cursor
     (blink-cursor-mode -1)

     ;; use spaces
     (setq-default indent-tabs-mode nil)

     ;; show empty lines
     (setq-default indicate-empty-lines t)

     ;; don't count two spaces after a period as the end of a sentence.
     ;; just one space is needed.
     (setq sentence-end-double-space nil)

     ;; delete the selected region when typing, just like as we expect nowadays.
     (delete-selection-mode t)

     ;; show parens
     (show-paren-mode t)

     ;; show column numbers
     (column-number-mode t)

     ;; word wrapping
     (global-visual-line-mode)
     (diminish 'visual-line-mode)

     ;; don't beep at me
     (setq visible-bell t)

     ;;
     (setq require-final-newline t
           next-line-add-newlines nil)

     (add-hook 'before-save-hook 'delete-trailing-whitespace)

     ;; some convenience shortcuts
     (global-set-key [(hyper a)] 'mark-whole-buffer)
     (global-set-key [(hyper v)] 'yank)
     (global-set-key [(hyper c)] 'kill-ring-save)
     (global-set-key [(hyper s)] 'save-buffer)
     (global-set-key [(hyper l)] 'goto-line)
     (global-set-key [(hyper w)]
                     (lambda ()
                       (interactive)
                       (delete-window)))
     (global-set-key [(hyper z)] 'undo)
   #+END_SRC

* Theme

** Solarized theme

   Here's some configuration for [[https://github.com/bbatsov/solarized-emacs/][bbatsov's solarized themes]].

   #+BEGIN_SRC emacs-lisp
     (use-package solarized-theme
       :defer 10
       :init
       (setq solarized-use-variable-pitch nil)
       (load-theme 'solarized-dark t)
       :ensure t)
   #+END_SRC

* Font

  [[http://adobe-fonts.github.io/source-code-pro/][Source Code Pro]] is a nice monospaced font.
  To install it on OS X, you can use Homebrew with [[http://caskroom.io/][Homebrew Cask]].

  #+BEGIN_SRC sh :tangle no
    # You may need to run these two lines if you haven't set up Homebrew Cask and its fonts formula.
    brew install caskroom/cask/brew-cask
    brew tap caskroom/fonts

    # install the source-code-pro font
    brew cask install font-source-code-pro
  #+END_SRC

  And here's how we tell Emacs to use the font we want to use.

  #+BEGIN_SRC emacs-lisp
    (add-to-list 'default-frame-alist
                 '(font . "Source Code Pro-14"))
  #+END_SRC

  Display emojis. Source of system-specific fonts is in [[https://github.com/syohex/emacs-ac-emoji][the README for the emacs-ac-emoji package]].

  #+BEGIN_SRC emacs-lisp
    (let ((font (if (= emacs-major-version 25)
                    "Symbola"
                  (cond ((string-equal system-type "darwin")    "Apple Color Emoji")
                        ((string-equal system-type "gnu/linux") "Symbola")))))
      (set-fontset-font t 'unicode font nil 'prepend))
  #+END_SRC

* Window management

** windmove

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "H-<left>") 'windmove-left)
     (global-set-key (kbd "H-<right>") 'windmove-right)
     (global-set-key (kbd "H-<up>") 'windmove-up)
     (global-set-key (kbd "H-<down>") 'windmove-down)
     (global-set-key (kbd "H-M-<left>") 'shrink-window-hirizontally)
     (global-set-key (kbd "H-M-<right>") 'enlarge-window-horizontally)
     (global-set-key (kbd "H-M-<up>") 'shrink-window)
     (global-set-key (kbd "H-M-<down>") 'enlarge-window)
   #+END_SRC

** ace-window

   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :init
       (global-set-key [remap other-window] 'ace-window))
   #+END_SRC

* Which Key

  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :diminish which-key-mode
      :init
      (which-key-mode))
  #+END_SRC

* Org

  #+BEGIN_SRC emacs-lisp
    (use-package org
      :pin org
      :ensure t
      :config
      (setq org-src-fontify-natively t)
      (setq org-capture-templates
            '(("p" "pt journal entry" entry
               (file+datetree "~/org/journals/pt.org")
               "* %U\n\t%?")
              ("l" "personal journal entry" entry
               (file+datetree "~/org/journals/personal.org")
               "* %U\n\t%?")
              ("i" "idea" entry
               (file+datetree "~/org/ideas.org")
               "* %U\n\t%?")
              ("t" "todo" entry
               (file+datetree "~/org/todo.org")
               "* %U\n\t%?")))
      :init
      (define-key global-map "\C-cr" 'org-capture))
  #+END_SRC

* Swiper / Ivy / Counsel

  Swiper gives us a really efficient incremental search with regular expressions and Ivy / Counsel replace a lot of ido or helms completion functionality.

  #+BEGIN_SRC emacs-lisp
    (use-package swiper
      :ensure t
      :init
      (global-set-key (kbd "C-s") 'swiper)
      (global-set-key (kbd "C-r") 'swiper))

    (use-package ivy
      :ensure t
      :diminish ivy-mode
      :config
      (setq ivy-use-virtual-buffers t
            ivy-display-style 'fancy)
      :init
      (ivy-mode 1)
      (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
      (global-set-key (kbd "C-c C-r") 'ivy-resume))

    (use-package counsel
      :ensure t
      :init
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history))
  #+END_SRC

* Page breaks

  Making page-break characters look pretty instead of appearing as =^L= in Emacs.
  See [[https://ericjmritz.wordpress.com/2015/08/29/using-page-breaks-in-gnu-emacs/][Using Page-Breaks in GNU Emacs]] by Eric J. M. Ritz.

  #+BEGIN_SRC emacs-lisp
    (use-package page-break-lines
      :ensure t)
  #+END_SRC

* Terminal

** PATH

   ~exec-path-from-shell~ makes the command-line path with Emacs' shell match the same one on OS X.

   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :if (memq window-system '(mac ns))
       :ensure t
       :init
       (exec-path-from-shell-initialize))
   #+END_SRC

** eshell

   #+BEGIN_SRC emacs-lisp
     (add-hook 'term-mode-hook
               '(lambda ()
                  (term-set-escape-char ?\C-x)))
     (defalias 'ff 'find-file)
     (defalias 'ffo 'find-file-other-window)
   #+END_SRC

** shell-switcher

   #+BEGIN_SRC emacs-lisp
     (use-package shell-switcher
       :ensure t
       :config
       (setq shell-switcher-mode t))
   #+END_SRC

* expand-region

  #+BEGIN_SRC emacs-lisp
    (use-package expand-region
      :ensure t
      :init
      (global-set-key (kbd "C-=") 'er/expand-region))
  #+END_SRC

* projectile

  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :diminish t
      :config
      (setq projectile-enable-caching nil
            projectile-completion-system 'ivy)
      :init
      (projectile-global-mode)
      (global-set-key (kbd "C-c f") 'projectile-find-file))
  #+END_SRC

* magit

  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :init
      (global-set-key (kbd "C-x g") 'magit-status))
  #+END_SRC

* paredit

  #+BEGIN_SRC emacs-lisp
    (use-package paredit
      :ensure t
      :diminish " Î»"
      :init
      (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
      (add-hook 'lisp-mode-hook #'enable-paredit-mode)
      (add-hook 'clojure-mode-hook #'enable-paredit-mode)
      (add-hook 'ielm-mode-hook #'enable-paredit-mode)
      (add-hook 'slime-repl-mode-hook #'enable-paredit-mode)
      (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
      (add-hook 'scheme-mode-hook #'enable-paredit-mode))
  #+END_SRC

* Programming modes

** YASnippet

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :diminish yas-minor-mode
       :init
       (yas-global-mode 1))
   #+END_SRC

** Clojure

*** clojure-mode

    #+BEGIN_SRC emacs-lisp
      (use-package clojure-mode
        :pin melpa-stable
        :ensure t
        :diminish (clojure-mode . "clj")
        :init
        (define-clojure-indent
          ;; standard stuff
          (apply 'defun)
          ;; carmine
          (wcar 'defun)
          ;; test.check
          (for-all 'defun)
          ;; midje
          (fact 'defun)
          ;; om.next
          (render 'defun)
          (query 'defun)
          (params 'defun)
          (ident 'defun)
          (add-root! 'defun)
          (transact! 'defun)
          ;; om.dom
          (div 'defun)
          (li 'defun)))
    #+END_SRC

*** cider

    #+BEGIN_SRC emacs-lisp
      (use-package cider
        :pin melpa-stable
        :ensure t
        :config
        (setq cider-repl-wrap-history t
              cider-test-show-report-on-success t
              cider-repl-history-file "~/.emacs.d/cider-history"
              cider-cljs-lein-repl "(do (use 'figwheel-sidecar.repl-api) (start-figwheel!) (cljs-repl))")
        :init
        (add-hook 'cider-mode-hook #'eldoc-mode))
    #+END_SRC

*** cider-eval-sexp-fu

    #+BEGIN_SRC emacs-lisp
      (use-package cider-eval-sexp-fu
        :pin melpa-stable
        :ensure t)
    #+END_SRC

*** clj-refactor

    #+BEGIN_SRC emacs-lisp
      (use-package clj-refactor
        :pin melpa-stable
        :ensure t
        :init
        (add-hook 'clojure-mode-hook
                  '(lambda ()
                     (clj-refactor-mode 1)
                     (yas-minor-mode 1)
                     (cljr-add-keybindings-with-prefix "C-c C-m"))))
    #+END_SRC

** web-mode

   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :ensure t
       :init
       (add-to-list 'auto-mode-alist '("\\.html\\.erb$" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.vm$" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.html$" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))
       (add-hook 'web-mode-hook
                 '(lambda ()
                    (setq web-mode-markup-indent-offset 2
                          web-mode-css-indent-offset 2
                          web-mode-code-indent-offset 2))))
   #+END_SRC

** css

   #+BEGIN_SRC emacs-lisp
     (setq css-indent-offset 2)
   #+END_SRC

** markdown

   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t
       :config
       (setq markdown-command "multimarkdown")
       :init
       (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode)))
   #+END_SRC

** dockerfile

   #+BEGIN_SRC emacs-lisp
     (use-package dockerfile-mode
       :ensure t)
   #+END_SRC

** javascript

   #+BEGIN_SRC emacs-lisp
     (setq js-indent-level 2)
   #+END_SRC
